{"version":3,"file":"static/js/518.5abf7a08.chunk.js","mappings":"uRAQaA,EAAS,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACjC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,IAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAG,UAAMd,EAAN,8BAAoCK,EAApC,oBAA4DJ,EAA5D,8CACHc,EAAQL,EAAaM,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACM,OAAVF,GAGJT,EAAgBS,KACf,CAACA,IA6BJ,OAVAE,EAAAA,EAAAA,YAAU,WACa,KAAjBZ,GAIJa,IAAAA,IAAUJ,GAAKK,MAAK,SAAAC,GAClBZ,EAAeY,EAASC,KAAKC,cAE9B,CAACR,EAAKT,KAGP,iBAAKkB,UAAWC,EAAAA,QAAAA,aAAhB,WACE,kBAAMD,UAAWC,EAAAA,QAAAA,KAAjB,WACE,kBACEC,KAAK,OACLC,YAAY,2BACZC,MAAOxB,EACPyB,SAlCiB,SAAAC,GACvBzB,EAAUyB,EAAEC,cAAcH,MAAMI,mBAmC5B,oBAAQN,KAAK,SAASO,QAhCP,SAAAH,GACnBA,EAAEI,iBAEoB,KAAlB9B,EAAO+B,QAKXvB,EAAgB,CAAEI,MAAOZ,IACzBG,EAAgBH,GAChBC,EAAU,KANR+B,EAAAA,GAAAA,KAAW,uCA4BT,WACE,SAAC,MAAD,KACA,4CAGJ,eAAIZ,UAAWC,EAAAA,QAAAA,WAAf,SACGjB,GACCA,EAAY6B,KAAI,SAAAC,GAAC,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAEE,IAAMC,MAAO,CAAEC,KAAM7B,GAA5C,SACGyB,EAAEK,SAFEL,EAAEE","sources":["components/Pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { ImSearch } from 'react-icons/im';\nimport { toast } from 'react-toastify';\nimport s from 'components/Pages/Pages.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Movies = ({ BASE_URL, API_KEY }) => {\n  const [movies, setMovies] = useState('');\n  const [searchMovies, setSearchMovies] = useState('');\n  const [renderMovie, setRenderMovie] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const URL = `${BASE_URL}search/movie?query=${searchMovies}&api_key=${API_KEY}&language=en-EN&page=1&include_adult=false`;\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query === null) {\n      return;\n    }\n    setSearchMovies(query);\n  }, [query]);\n\n  const handleNameChange = e => {\n    setMovies(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (movies.trim() === '') {\n      toast.warn('There is nothing for this request!');\n      return;\n    }\n\n    setSearchParams({ query: movies });\n    setSearchMovies(movies);\n    setMovies('');\n  };\n\n  useEffect(() => {\n    if (searchMovies === '') {\n      return;\n    }\n\n    axios.get(URL).then(response => {\n      setRenderMovie(response.data.results);\n    });\n  }, [URL, searchMovies]);\n\n  return (\n    <div className={s.movies_block}>\n      <form className={s.form}>\n        <input\n          type=\"text\"\n          placeholder=\"Search images and photos\"\n          value={movies}\n          onChange={handleNameChange}\n        />\n        <button type=\"submit\" onClick={handleSubmit}>\n          <ImSearch />\n          <span>Search</span>\n        </button>\n      </form>\n      <ul className={s.moviesList}>\n        {renderMovie &&\n          renderMovie.map(m => (\n            <li key={m.id}>\n              <Link to={`/movies/${m.id}`} state={{ from: location }}>\n                {m.title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nMovies.propTypes = {\n  BASE_URL: PropTypes.string.isRequired,\n  API_KEY: PropTypes.string.isRequired,\n};\n"],"names":["Movies","BASE_URL","API_KEY","useState","movies","setMovies","searchMovies","setSearchMovies","renderMovie","setRenderMovie","useSearchParams","searchParams","setSearchParams","location","useLocation","URL","query","get","useEffect","axios","then","response","data","results","className","s","type","placeholder","value","onChange","e","currentTarget","toLowerCase","onClick","preventDefault","trim","toast","map","m","to","id","state","from","title"],"sourceRoot":""}